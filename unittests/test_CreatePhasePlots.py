
# Generated by Qodo Gen
from turtle import pd


# Dependencies:
# pip install pytest-mock
import pytest

class TestCreatePhaseLots:

    # Function creates 2D and 3D phase plots for each of the four data columns (Open, Close, High, Low)
    def test_creates_phase_plots_for_all_columns(self, mocker):
        # Mock the dependent functions
        mock_phase_plot_data = mocker.patch('AdvancedModeling.phase_plot_data')
        mock_two_d_phase_plot = mocker.patch('AdvancedModeling.two_D_phase_plot')
        mock_three_d_phase_plot = mocker.patch('AdvancedModeling.three_D_phase_plot')
    
        # Create test data
        test_data = pd.DataFrame({
            'Open': [1, 2, 3, 4, 5],
            'Close': [5, 4, 3, 2, 1],
            'High': [6, 7, 8, 9, 10],
            'Low': [0, 1, 2, 3, 4]
        })
    
        # Set up the mock return values
        mock_phase_plot_data.return_value = [[1, 2, 3], [2, 3, 4]]
    
        # Call the function under test
        from AdvancedModeling import create_phase_lots
        create_phase_lots(test_data, "Test")
    
        # Verify that phase_plot_data was called 8 times (2 times for each column)
        assert mock_phase_plot_data.call_count == 8
    
        # Verify that two_D_phase_plot and three_D_phase_plot were each called 4 times (once for each column)
        assert mock_two_d_phase_plot.call_count == 4
        assert mock_three_d_phase_plot.call_count == 4
    
        # Verify the correct column data was passed to phase_plot_data
        for i, col in enumerate(["Open", "Close", "High", "Low"]):
            # Check 2D phase plot calls
            assert mock_phase_plot_data.call_args_list[i*2][0][0] == test_data[col].tolist()
            assert mock_phase_plot_data.call_args_list[i*2][0][1] == 2
        
            # Check 3D phase plot calls
            assert mock_phase_plot_data.call_args_list[i*2+1][0][0] == test_data[col].tolist()
            assert mock_phase_plot_data.call_args_list[i*2+1][0][1] == 3
        
            # Check plot titles
            assert mock_two_d_phase_plot.call_args_list[i][0][1] == f"Test - {col}"
            assert mock_three_d_phase_plot.call_args_list[i][0][1] == f"Test - {col}"

    # Function handles empty dataframes by printing a message and returning early
    def test_handles_empty_dataframe(self, mocker):
        # Mock the dependent functions
        mock_phase_plot_data = mocker.patch('AdvancedModeling.phase_plot_data')
        mock_two_d_phase_plot = mocker.patch('AdvancedModeling.two_D_phase_plot')
        mock_three_d_phase_plot = mocker.patch('AdvancedModeling.three_D_phase_plot')
    
        # Mock print function
        mock_print = mocker.patch('builtins.print')
    
        # Create empty dataframe
        empty_df = pd.DataFrame()
    
        # Call the function under test
        from AdvancedModeling import create_phase_lots
        create_phase_lots(empty_df, "Test")
    
        # Verify print was called with the correct message
        mock_print.assert_called_once_with("Empty Dataframe - Phase Plots")
    
        # Verify that none of the plotting functions were called
        mock_phase_plot_data.assert_not_called()
        mock_two_d_phase_plot.assert_not_called()
        mock_three_d_phase_plot.assert_not_called()