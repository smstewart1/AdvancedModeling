
# Generated by Qodo Gen
from turtle import pd
import AdvancedModeling

# Dependencies:
# pip install pytest-mock
import pytest

class TestPlotterSupport:

    # Function creates a scatter plot with correct labels and title
    def test_scatter_plot_with_correct_labels_and_title(self, mocker):
        # Arrange
        mock_plt = mocker.patch('matplotlib.pyplot')
        df1 = pd.Series([1, 2, 3])
        df2 = pd.Series([4, 5, 6])
        df1_name = "X_values"
        df2_name = "Y_values"
        name = "Test Plot"
        expected_file_label = f"{name}_{df1_name}_vs_{df2_name}.tiff"
    
        # Act
        from AdvancedModeling import plotter_support
        plotter_support(df1, df2, df1_name, df2_name, name)
    
        # Assert
        mock_plt.scatter.assert_called_once_with(df1, df2)
        mock_plt.xlabel.assert_called_once_with(df1_name)
        mock_plt.ylabel.assert_called_once_with(df2_name)
        mock_plt.title.assert_called_once_with(f"{name} - {df1_name} vs {df2_name}")
        mock_plt.savefig.assert_called_once_with(expected_file_label)
        mock_plt.clf.assert_called_once()
        mock_plt.close.assert_called_once()

    # Empty dataframes passed as df1 or df2
    def test_empty_dataframes_handling(self, mocker):
        # Arrange
        mock_plt = mocker.patch('matplotlib.pyplot')
        df1 = pd.Series([])
        df2 = pd.Series([])
        df1_name = "Empty_X"
        df2_name = "Empty_Y"
        name = "Empty Plot"
        expected_file_label = f"{name}_{df1_name}_vs_{df2_name}.tiff"
    
        # Act
        from AdvancedModeling import plotter_support
        plotter_support(df1, df2, df1_name, df2_name, name)
    
        # Assert
        mock_plt.scatter.assert_called_once_with(df1, df2)
        mock_plt.xlabel.assert_called_once_with(df1_name)
        mock_plt.ylabel.assert_called_once_with(df2_name)
        mock_plt.title.assert_called_once_with(f"{name} - {df1_name} vs {df2_name}")
        mock_plt.savefig.assert_called_once_with(expected_file_label)
        mock_plt.clf.assert_called_once()
        mock_plt.close.assert_called_once()