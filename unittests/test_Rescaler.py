
# Generated by Qodo Gen
import pandas as pd
import pytest


class TestRescaler:

    # Rescales numeric columns (float64, int64) to range [0,1] using min-max normalization
    def test_rescales_numeric_columns(self):
        # Arrange
        import pandas as pd
        import numpy as np

        # Create test dataframe with numeric columns
        df = pd.DataFrame({
            'float_col': [1.5, 3.0, 7.5, 10.0],
            'int_col': [5, 10, 15, 20],
            'str_col': ['a', 'b', 'c', 'd']
        })

        # Act
        result = rescaler(df)

        # Assert
        # Check that numeric columns are rescaled to [0,1]
        assert np.isclose(result['float_col'].min(), 0.0)
        assert np.isclose(result['float_col'].max(), 1.0)
        assert np.isclose(result['int_col'].min(), 0.0)
        assert np.isclose(result['int_col'].max(), 1.0)

        # Check that string column is unchanged
        assert (result['str_col'] == df['str_col']).all()

        # Check specific values
        assert np.isclose(result['float_col'].iloc[0], 0.0)
        assert np.isclose(result['float_col'].iloc[-1], 1.0)
        assert np.isclose(result['int_col'].iloc[0], 0.0)
        assert np.isclose(result['int_col'].iloc[-1], 1.0)

    # Handles empty dataframe by returning None and printing a message
    def test_handles_empty_dataframe(self):
        # Arrange
        import pandas as pd
        import io
        import sys

        # Create empty dataframe
        empty_df = pd.DataFrame()

        # Capture stdout to verify print message
        captured_output = io.StringIO()
        sys.stdout = captured_output

        # Act
        result = rescaler(empty_df)

        # Reset stdout
        sys.stdout = sys.__stdout__

        # Assert
        assert result is None
        assert "Empty Dataframe - Rescaler" in captured_output.getvalue()
